/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "pubkey/pkg/apis/sirocco.cloud/v1alpha1"
)

// PubkeyLister helps list Pubkeys.
type PubkeyLister interface {
	// List lists all Pubkeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Pubkey, err error)
	// Pubkeys returns an object that can list and get Pubkeys.
	Pubkeys(namespace string) PubkeyNamespaceLister
	PubkeyListerExpansion
}

// pubkeyLister implements the PubkeyLister interface.
type pubkeyLister struct {
	indexer cache.Indexer
}

// NewPubkeyLister returns a new PubkeyLister.
func NewPubkeyLister(indexer cache.Indexer) PubkeyLister {
	return &pubkeyLister{indexer: indexer}
}

// List lists all Pubkeys in the indexer.
func (s *pubkeyLister) List(selector labels.Selector) (ret []*v1alpha1.Pubkey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pubkey))
	})
	return ret, err
}

// Pubkeys returns an object that can list and get Pubkeys.
func (s *pubkeyLister) Pubkeys(namespace string) PubkeyNamespaceLister {
	return pubkeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PubkeyNamespaceLister helps list and get Pubkeys.
type PubkeyNamespaceLister interface {
	// List lists all Pubkeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Pubkey, err error)
	// Get retrieves the Pubkey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Pubkey, error)
	PubkeyNamespaceListerExpansion
}

// pubkeyNamespaceLister implements the PubkeyNamespaceLister
// interface.
type pubkeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pubkeys in the indexer for a given namespace.
func (s pubkeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Pubkey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pubkey))
	})
	return ret, err
}

// Get retrieves the Pubkey from the indexer for a given namespace and name.
func (s pubkeyNamespaceLister) Get(name string) (*v1alpha1.Pubkey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pubkey"), name)
	}
	return obj.(*v1alpha1.Pubkey), nil
}
